// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package server

import (
	"fmt"
	"io"
	"strconv"
)

type HatenaEntry struct {
	URL      string  `json:"url"`
	HatebURL string  `json:"hatebUrl"`
	ImageURL *string `json:"imageUrl"`
	Title    string  `json:"title"`
}

type HatenaInput struct {
	Limit    *int           `json:"limit"`
	Offset   *int           `json:"offset"`
	Category HatenaCategory `json:"category"`
	ListType HatenaListType `json:"listType"`
}

type HatenaCategory string

const (
	HatenaCategoryTechnology HatenaCategory = "Technology"
)

var AllHatenaCategory = []HatenaCategory{
	HatenaCategoryTechnology,
}

func (e HatenaCategory) IsValid() bool {
	switch e {
	case HatenaCategoryTechnology:
		return true
	}
	return false
}

func (e HatenaCategory) String() string {
	return string(e)
}

func (e *HatenaCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HatenaCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HatenaCategory", str)
	}
	return nil
}

func (e HatenaCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HatenaListType string

const (
	HatenaListTypePopular HatenaListType = "Popular"
	HatenaListTypeNew     HatenaListType = "New"
)

var AllHatenaListType = []HatenaListType{
	HatenaListTypePopular,
	HatenaListTypeNew,
}

func (e HatenaListType) IsValid() bool {
	switch e {
	case HatenaListTypePopular, HatenaListTypeNew:
		return true
	}
	return false
}

func (e HatenaListType) String() string {
	return string(e)
}

func (e *HatenaListType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HatenaListType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HatenaListType", str)
	}
	return nil
}

func (e HatenaListType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
